'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="APPS_GSC")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblAtc(instance As tblAtc)
    End Sub
  Partial Private Sub UpdatetblAtc(instance As tblAtc)
    End Sub
  Partial Private Sub DeletetblAtc(instance As tblAtc)
    End Sub
  Partial Private Sub Inserttblbank(instance As tblbank)
    End Sub
  Partial Private Sub Updatetblbank(instance As tblbank)
    End Sub
  Partial Private Sub Deletetblbank(instance As tblbank)
    End Sub
  Partial Private Sub InserttblDetail(instance As tblDetail)
    End Sub
  Partial Private Sub UpdatetblDetail(instance As tblDetail)
    End Sub
  Partial Private Sub DeletetblDetail(instance As tblDetail)
    End Sub
  Partial Private Sub Inserttblmode(instance As tblmode)
    End Sub
  Partial Private Sub Updatetblmode(instance As tblmode)
    End Sub
  Partial Private Sub Deletetblmode(instance As tblmode)
    End Sub
  Partial Private Sub InserttblTerm(instance As tblTerm)
    End Sub
  Partial Private Sub UpdatetblTerm(instance As tblTerm)
    End Sub
  Partial Private Sub DeletetblTerm(instance As tblTerm)
    End Sub
  Partial Private Sub Inserttbltype(instance As tbltype)
    End Sub
  Partial Private Sub Updatetbltype(instance As tbltype)
    End Sub
  Partial Private Sub Deletetbltype(instance As tbltype)
    End Sub
  Partial Private Sub Inserttblvoucherdetail(instance As tblvoucherdetail)
    End Sub
  Partial Private Sub Updatetblvoucherdetail(instance As tblvoucherdetail)
    End Sub
  Partial Private Sub Deletetblvoucherdetail(instance As tblvoucherdetail)
    End Sub
  Partial Private Sub Inserttbluser(instance As tbluser)
    End Sub
  Partial Private Sub Updatetbluser(instance As tbluser)
    End Sub
  Partial Private Sub Deletetbluser(instance As tbluser)
    End Sub
  Partial Private Sub InserttblHeader(instance As tblHeader)
    End Sub
  Partial Private Sub UpdatetblHeader(instance As tblHeader)
    End Sub
  Partial Private Sub DeletetblHeader(instance As tblHeader)
    End Sub
  Partial Private Sub InserttblTransDetail(instance As tblTransDetail)
    End Sub
  Partial Private Sub UpdatetblTransDetail(instance As tblTransDetail)
    End Sub
  Partial Private Sub DeletetblTransDetail(instance As tblTransDetail)
    End Sub
  Partial Private Sub InserttblvoucherHeader(instance As tblvoucherHeader)
    End Sub
  Partial Private Sub UpdatetblvoucherHeader(instance As tblvoucherHeader)
    End Sub
  Partial Private Sub DeletetblvoucherHeader(instance As tblvoucherHeader)
    End Sub
  Partial Private Sub Inserttblsupplier(instance As tblsupplier)
    End Sub
  Partial Private Sub Updatetblsupplier(instance As tblsupplier)
    End Sub
  Partial Private Sub Deletetblsupplier(instance As tblsupplier)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.APPS.My.MySettings.Default.APPS_GSCConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblAtcs() As System.Data.Linq.Table(Of tblAtc)
		Get
			Return Me.GetTable(Of tblAtc)
		End Get
	End Property
	
	Public ReadOnly Property tblbanks() As System.Data.Linq.Table(Of tblbank)
		Get
			Return Me.GetTable(Of tblbank)
		End Get
	End Property
	
	Public ReadOnly Property tblDetails() As System.Data.Linq.Table(Of tblDetail)
		Get
			Return Me.GetTable(Of tblDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblmodes() As System.Data.Linq.Table(Of tblmode)
		Get
			Return Me.GetTable(Of tblmode)
		End Get
	End Property
	
	Public ReadOnly Property tblTerms() As System.Data.Linq.Table(Of tblTerm)
		Get
			Return Me.GetTable(Of tblTerm)
		End Get
	End Property
	
	Public ReadOnly Property tbltypes() As System.Data.Linq.Table(Of tbltype)
		Get
			Return Me.GetTable(Of tbltype)
		End Get
	End Property
	
	Public ReadOnly Property tblvoucherdetails() As System.Data.Linq.Table(Of tblvoucherdetail)
		Get
			Return Me.GetTable(Of tblvoucherdetail)
		End Get
	End Property
	
	Public ReadOnly Property tblusers() As System.Data.Linq.Table(Of tbluser)
		Get
			Return Me.GetTable(Of tbluser)
		End Get
	End Property
	
	Public ReadOnly Property tblHeaders() As System.Data.Linq.Table(Of tblHeader)
		Get
			Return Me.GetTable(Of tblHeader)
		End Get
	End Property
	
	Public ReadOnly Property tblTransDetails() As System.Data.Linq.Table(Of tblTransDetail)
		Get
			Return Me.GetTable(Of tblTransDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblvoucherHeaders() As System.Data.Linq.Table(Of tblvoucherHeader)
		Get
			Return Me.GetTable(Of tblvoucherHeader)
		End Get
	End Property
	
	Public ReadOnly Property tblsuppliers() As System.Data.Linq.Table(Of tblsupplier)
		Get
			Return Me.GetTable(Of tblsupplier)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAtc")>  _
Partial Public Class tblAtc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _ATC As String
	
	Private _Des As String
	
	Private _rate As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnATCChanging(value As String)
    End Sub
    Partial Private Sub OnATCChanged()
    End Sub
    Partial Private Sub OnDesChanging(value As String)
    End Sub
    Partial Private Sub OnDesChanged()
    End Sub
    Partial Private Sub OnrateChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnrateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATC", DbType:="VarChar(MAX)")>  _
	Public Property ATC() As String
		Get
			Return Me._ATC
		End Get
		Set
			If (String.Equals(Me._ATC, value) = false) Then
				Me.OnATCChanging(value)
				Me.SendPropertyChanging
				Me._ATC = value
				Me.SendPropertyChanged("ATC")
				Me.OnATCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Des", DbType:="VarChar(MAX)")>  _
	Public Property Des() As String
		Get
			Return Me._Des
		End Get
		Set
			If (String.Equals(Me._Des, value) = false) Then
				Me.OnDesChanging(value)
				Me.SendPropertyChanging
				Me._Des = value
				Me.SendPropertyChanged("Des")
				Me.OnDesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rate", DbType:="Float")>  _
	Public Property rate() As System.Nullable(Of Double)
		Get
			Return Me._rate
		End Get
		Set
			If (Me._rate.Equals(value) = false) Then
				Me.OnrateChanging(value)
				Me.SendPropertyChanging
				Me._rate = value
				Me.SendPropertyChanged("rate")
				Me.OnrateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblbank")>  _
Partial Public Class tblbank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _bank As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnbankChanging(value As String)
    End Sub
    Partial Private Sub OnbankChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bank", DbType:="VarChar(200)")>  _
	Public Property bank() As String
		Get
			Return Me._bank
		End Get
		Set
			If (String.Equals(Me._bank, value) = false) Then
				Me.OnbankChanging(value)
				Me.SendPropertyChanging
				Me._bank = value
				Me.SendPropertyChanged("bank")
				Me.OnbankChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDetail")>  _
Partial Public Class tblDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Type As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Num As String
	
	Private _Name As String
	
	Private _Memo As String
	
	Private _Account As String
	
	Private _Class As String
	
	Private _Clr As String
	
	Private _Split As String
	
	Private _Amount As System.Nullable(Of Double)
	
	Private _Balance As System.Nullable(Of Double)
	
	Private _HeaderID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnNumChanging(value As String)
    End Sub
    Partial Private Sub OnNumChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMemoChanged()
    End Sub
    Partial Private Sub OnAccountChanging(value As String)
    End Sub
    Partial Private Sub OnAccountChanged()
    End Sub
    Partial Private Sub OnClassChanging(value As String)
    End Sub
    Partial Private Sub OnClassChanged()
    End Sub
    Partial Private Sub OnClrChanging(value As String)
    End Sub
    Partial Private Sub OnClrChanged()
    End Sub
    Partial Private Sub OnSplitChanging(value As String)
    End Sub
    Partial Private Sub OnSplitChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnBalanceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnBalanceChanged()
    End Sub
    Partial Private Sub OnHeaderIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnHeaderIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(50)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Num", DbType:="VarChar(MAX)")>  _
	Public Property Num() As String
		Get
			Return Me._Num
		End Get
		Set
			If (String.Equals(Me._Num, value) = false) Then
				Me.OnNumChanging(value)
				Me.SendPropertyChanging
				Me._Num = value
				Me.SendPropertyChanged("Num")
				Me.OnNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memo", DbType:="VarChar(MAX)")>  _
	Public Property Memo() As String
		Get
			Return Me._Memo
		End Get
		Set
			If (String.Equals(Me._Memo, value) = false) Then
				Me.OnMemoChanging(value)
				Me.SendPropertyChanging
				Me._Memo = value
				Me.SendPropertyChanged("Memo")
				Me.OnMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Account", DbType:="VarChar(MAX)")>  _
	Public Property Account() As String
		Get
			Return Me._Account
		End Get
		Set
			If (String.Equals(Me._Account, value) = false) Then
				Me.OnAccountChanging(value)
				Me.SendPropertyChanging
				Me._Account = value
				Me.SendPropertyChanged("Account")
				Me.OnAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Class", Storage:="_Class", DbType:="VarChar(MAX)")>  _
	Public Property [Class]() As String
		Get
			Return Me._Class
		End Get
		Set
			If (String.Equals(Me._Class, value) = false) Then
				Me.OnClassChanging(value)
				Me.SendPropertyChanging
				Me._Class = value
				Me.SendPropertyChanged("[Class]")
				Me.OnClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Clr", DbType:="VarChar(MAX)")>  _
	Public Property Clr() As String
		Get
			Return Me._Clr
		End Get
		Set
			If (String.Equals(Me._Clr, value) = false) Then
				Me.OnClrChanging(value)
				Me.SendPropertyChanging
				Me._Clr = value
				Me.SendPropertyChanged("Clr")
				Me.OnClrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Split", DbType:="VarChar(MAX)")>  _
	Public Property Split() As String
		Get
			Return Me._Split
		End Get
		Set
			If (String.Equals(Me._Split, value) = false) Then
				Me.OnSplitChanging(value)
				Me.SendPropertyChanging
				Me._Split = value
				Me.SendPropertyChanged("Split")
				Me.OnSplitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Float")>  _
	Public Property Amount() As System.Nullable(Of Double)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Balance", DbType:="Float")>  _
	Public Property Balance() As System.Nullable(Of Double)
		Get
			Return Me._Balance
		End Get
		Set
			If (Me._Balance.Equals(value) = false) Then
				Me.OnBalanceChanging(value)
				Me.SendPropertyChanging
				Me._Balance = value
				Me.SendPropertyChanged("Balance")
				Me.OnBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeaderID", DbType:="Int")>  _
	Public Property HeaderID() As System.Nullable(Of Integer)
		Get
			Return Me._HeaderID
		End Get
		Set
			If (Me._HeaderID.Equals(value) = false) Then
				Me.OnHeaderIDChanging(value)
				Me.SendPropertyChanging
				Me._HeaderID = value
				Me.SendPropertyChanged("HeaderID")
				Me.OnHeaderIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblmode")>  _
Partial Public Class tblmode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _modeofreleasing As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnmodeofreleasingChanging(value As String)
    End Sub
    Partial Private Sub OnmodeofreleasingChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modeofreleasing", DbType:="VarChar(MAX)")>  _
	Public Property modeofreleasing() As String
		Get
			Return Me._modeofreleasing
		End Get
		Set
			If (String.Equals(Me._modeofreleasing, value) = false) Then
				Me.OnmodeofreleasingChanging(value)
				Me.SendPropertyChanging
				Me._modeofreleasing = value
				Me.SendPropertyChanged("modeofreleasing")
				Me.OnmodeofreleasingChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTerms")>  _
Partial Public Class tblTerm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _terms As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntermsChanging(value As String)
    End Sub
    Partial Private Sub OntermsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_terms", DbType:="VarChar(200)")>  _
	Public Property terms() As String
		Get
			Return Me._terms
		End Get
		Set
			If (String.Equals(Me._terms, value) = false) Then
				Me.OntermsChanging(value)
				Me.SendPropertyChanging
				Me._terms = value
				Me.SendPropertyChanged("terms")
				Me.OntermsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tbltype")>  _
Partial Public Class tbltype
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(2000)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblvoucherdetail")>  _
Partial Public Class tblvoucherdetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Prf As String
	
	Private _Bank As String
	
	Private _Checkno As String
	
	Private _Amount As System.Nullable(Of Double)
	
	Private _Status As System.Nullable(Of Double)
	
	Private _Status1 As String
	
	Private _headerid As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnPrfChanging(value As String)
    End Sub
    Partial Private Sub OnPrfChanged()
    End Sub
    Partial Private Sub OnBankChanging(value As String)
    End Sub
    Partial Private Sub OnBankChanged()
    End Sub
    Partial Private Sub OnChecknoChanging(value As String)
    End Sub
    Partial Private Sub OnChecknoChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnStatus1Changing(value As String)
    End Sub
    Partial Private Sub OnStatus1Changed()
    End Sub
    Partial Private Sub OnheaderidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnheaderidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prf", DbType:="VarChar(MAX)")>  _
	Public Property Prf() As String
		Get
			Return Me._Prf
		End Get
		Set
			If (String.Equals(Me._Prf, value) = false) Then
				Me.OnPrfChanging(value)
				Me.SendPropertyChanging
				Me._Prf = value
				Me.SendPropertyChanged("Prf")
				Me.OnPrfChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bank", DbType:="VarChar(MAX)")>  _
	Public Property Bank() As String
		Get
			Return Me._Bank
		End Get
		Set
			If (String.Equals(Me._Bank, value) = false) Then
				Me.OnBankChanging(value)
				Me.SendPropertyChanging
				Me._Bank = value
				Me.SendPropertyChanged("Bank")
				Me.OnBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Checkno", DbType:="VarChar(MAX)")>  _
	Public Property Checkno() As String
		Get
			Return Me._Checkno
		End Get
		Set
			If (String.Equals(Me._Checkno, value) = false) Then
				Me.OnChecknoChanging(value)
				Me.SendPropertyChanging
				Me._Checkno = value
				Me.SendPropertyChanged("Checkno")
				Me.OnChecknoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Float")>  _
	Public Property Amount() As System.Nullable(Of Double)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Float")>  _
	Public Property Status() As System.Nullable(Of Double)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status1", DbType:="VarChar(MAX)")>  _
	Public Property Status1() As String
		Get
			Return Me._Status1
		End Get
		Set
			If (String.Equals(Me._Status1, value) = false) Then
				Me.OnStatus1Changing(value)
				Me.SendPropertyChanging
				Me._Status1 = value
				Me.SendPropertyChanged("Status1")
				Me.OnStatus1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_headerid", DbType:="Int")>  _
	Public Property headerid() As System.Nullable(Of Integer)
		Get
			Return Me._headerid
		End Get
		Set
			If (Me._headerid.Equals(value) = false) Then
				Me.OnheaderidChanging(value)
				Me.SendPropertyChanging
				Me._headerid = value
				Me.SendPropertyChanged("headerid")
				Me.OnheaderidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tbluser")>  _
Partial Public Class tbluser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _username As String
	
	Private _password As String
	
	Private _Status As String
	
	Private _dfault1 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub Ondfault1Changing(value As String)
    End Sub
    Partial Private Sub Ondfault1Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(200)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(200)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(200)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(200)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dfault1", DbType:="VarChar(200)")>  _
	Public Property dfault1() As String
		Get
			Return Me._dfault1
		End Get
		Set
			If (String.Equals(Me._dfault1, value) = false) Then
				Me.Ondfault1Changing(value)
				Me.SendPropertyChanging
				Me._dfault1 = value
				Me.SendPropertyChanged("dfault1")
				Me.Ondfault1Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblHeader")>  _
Partial Public Class tblHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _HeaderID As Integer
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Series As String
	
	Private _Payor As String
	
	Private _Type As String
	
	Private _Payto As String
	
	Private _Bank As String
	
	Private _Terms As String
	
	Private _Checkdate As System.Nullable(Of Date)
	
	Private _Remarks As String
	
	Private _Releasing As String
	
	Private _Checkno As String
	
	Private _Encoder As String
	
	Private _apprv As String
	
	Private _checkby As String
	
	Private _vat As String
	
	Private _Status As String
	
	Private _printed As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHeaderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnHeaderIDChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnSeriesChanging(value As String)
    End Sub
    Partial Private Sub OnSeriesChanged()
    End Sub
    Partial Private Sub OnPayorChanging(value As String)
    End Sub
    Partial Private Sub OnPayorChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnPaytoChanging(value As String)
    End Sub
    Partial Private Sub OnPaytoChanged()
    End Sub
    Partial Private Sub OnBankChanging(value As String)
    End Sub
    Partial Private Sub OnBankChanged()
    End Sub
    Partial Private Sub OnTermsChanging(value As String)
    End Sub
    Partial Private Sub OnTermsChanged()
    End Sub
    Partial Private Sub OnCheckdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCheckdateChanged()
    End Sub
    Partial Private Sub OnRemarksChanging(value As String)
    End Sub
    Partial Private Sub OnRemarksChanged()
    End Sub
    Partial Private Sub OnReleasingChanging(value As String)
    End Sub
    Partial Private Sub OnReleasingChanged()
    End Sub
    Partial Private Sub OnChecknoChanging(value As String)
    End Sub
    Partial Private Sub OnChecknoChanged()
    End Sub
    Partial Private Sub OnEncoderChanging(value As String)
    End Sub
    Partial Private Sub OnEncoderChanged()
    End Sub
    Partial Private Sub OnapprvChanging(value As String)
    End Sub
    Partial Private Sub OnapprvChanged()
    End Sub
    Partial Private Sub OncheckbyChanging(value As String)
    End Sub
    Partial Private Sub OncheckbyChanged()
    End Sub
    Partial Private Sub OnvatChanging(value As String)
    End Sub
    Partial Private Sub OnvatChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnprintedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnprintedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeaderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property HeaderID() As Integer
		Get
			Return Me._HeaderID
		End Get
		Set
			If ((Me._HeaderID = value)  _
						= false) Then
				Me.OnHeaderIDChanging(value)
				Me.SendPropertyChanging
				Me._HeaderID = value
				Me.SendPropertyChanged("HeaderID")
				Me.OnHeaderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Series", DbType:="VarChar(MAX)")>  _
	Public Property Series() As String
		Get
			Return Me._Series
		End Get
		Set
			If (String.Equals(Me._Series, value) = false) Then
				Me.OnSeriesChanging(value)
				Me.SendPropertyChanging
				Me._Series = value
				Me.SendPropertyChanged("Series")
				Me.OnSeriesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Payor", DbType:="VarChar(MAX)")>  _
	Public Property Payor() As String
		Get
			Return Me._Payor
		End Get
		Set
			If (String.Equals(Me._Payor, value) = false) Then
				Me.OnPayorChanging(value)
				Me.SendPropertyChanging
				Me._Payor = value
				Me.SendPropertyChanged("Payor")
				Me.OnPayorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(MAX)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Payto", DbType:="VarChar(MAX)")>  _
	Public Property Payto() As String
		Get
			Return Me._Payto
		End Get
		Set
			If (String.Equals(Me._Payto, value) = false) Then
				Me.OnPaytoChanging(value)
				Me.SendPropertyChanging
				Me._Payto = value
				Me.SendPropertyChanged("Payto")
				Me.OnPaytoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bank", DbType:="VarChar(MAX)")>  _
	Public Property Bank() As String
		Get
			Return Me._Bank
		End Get
		Set
			If (String.Equals(Me._Bank, value) = false) Then
				Me.OnBankChanging(value)
				Me.SendPropertyChanging
				Me._Bank = value
				Me.SendPropertyChanged("Bank")
				Me.OnBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Terms", DbType:="VarChar(MAX)")>  _
	Public Property Terms() As String
		Get
			Return Me._Terms
		End Get
		Set
			If (String.Equals(Me._Terms, value) = false) Then
				Me.OnTermsChanging(value)
				Me.SendPropertyChanging
				Me._Terms = value
				Me.SendPropertyChanged("Terms")
				Me.OnTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Checkdate", DbType:="Date")>  _
	Public Property Checkdate() As System.Nullable(Of Date)
		Get
			Return Me._Checkdate
		End Get
		Set
			If (Me._Checkdate.Equals(value) = false) Then
				Me.OnCheckdateChanging(value)
				Me.SendPropertyChanging
				Me._Checkdate = value
				Me.SendPropertyChanged("Checkdate")
				Me.OnCheckdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remarks", DbType:="VarChar(MAX)")>  _
	Public Property Remarks() As String
		Get
			Return Me._Remarks
		End Get
		Set
			If (String.Equals(Me._Remarks, value) = false) Then
				Me.OnRemarksChanging(value)
				Me.SendPropertyChanging
				Me._Remarks = value
				Me.SendPropertyChanged("Remarks")
				Me.OnRemarksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Releasing", DbType:="VarChar(MAX)")>  _
	Public Property Releasing() As String
		Get
			Return Me._Releasing
		End Get
		Set
			If (String.Equals(Me._Releasing, value) = false) Then
				Me.OnReleasingChanging(value)
				Me.SendPropertyChanging
				Me._Releasing = value
				Me.SendPropertyChanged("Releasing")
				Me.OnReleasingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Checkno", DbType:="VarChar(MAX)")>  _
	Public Property Checkno() As String
		Get
			Return Me._Checkno
		End Get
		Set
			If (String.Equals(Me._Checkno, value) = false) Then
				Me.OnChecknoChanging(value)
				Me.SendPropertyChanging
				Me._Checkno = value
				Me.SendPropertyChanged("Checkno")
				Me.OnChecknoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Encoder", DbType:="VarChar(MAX)")>  _
	Public Property Encoder() As String
		Get
			Return Me._Encoder
		End Get
		Set
			If (String.Equals(Me._Encoder, value) = false) Then
				Me.OnEncoderChanging(value)
				Me.SendPropertyChanging
				Me._Encoder = value
				Me.SendPropertyChanged("Encoder")
				Me.OnEncoderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apprv", DbType:="VarChar(MAX)")>  _
	Public Property apprv() As String
		Get
			Return Me._apprv
		End Get
		Set
			If (String.Equals(Me._apprv, value) = false) Then
				Me.OnapprvChanging(value)
				Me.SendPropertyChanging
				Me._apprv = value
				Me.SendPropertyChanged("apprv")
				Me.OnapprvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkby", DbType:="VarChar(MAX)")>  _
	Public Property checkby() As String
		Get
			Return Me._checkby
		End Get
		Set
			If (String.Equals(Me._checkby, value) = false) Then
				Me.OncheckbyChanging(value)
				Me.SendPropertyChanging
				Me._checkby = value
				Me.SendPropertyChanged("checkby")
				Me.OncheckbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vat", DbType:="VarChar(MAX)")>  _
	Public Property vat() As String
		Get
			Return Me._vat
		End Get
		Set
			If (String.Equals(Me._vat, value) = false) Then
				Me.OnvatChanging(value)
				Me.SendPropertyChanging
				Me._vat = value
				Me.SendPropertyChanged("vat")
				Me.OnvatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(MAX)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_printed", DbType:="Int")>  _
	Public Property printed() As System.Nullable(Of Integer)
		Get
			Return Me._printed
		End Get
		Set
			If (Me._printed.Equals(value) = false) Then
				Me.OnprintedChanging(value)
				Me.SendPropertyChanging
				Me._printed = value
				Me.SendPropertyChanged("printed")
				Me.OnprintedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTransDetail")>  _
Partial Public Class tblTransDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Type As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Ref As String
	
	Private _PaymentRelatedto As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _HeaderID As String
	
	Private _Accnt As String
	
	Private _tax As System.Nullable(Of Decimal)
	
	Private _formula1 As System.Nullable(Of Double)
	
	Private _formula2 As System.Nullable(Of Double)
	
	Private _formula3 As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnRefChanging(value As String)
    End Sub
    Partial Private Sub OnRefChanged()
    End Sub
    Partial Private Sub OnPaymentRelatedtoChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentRelatedtoChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnHeaderIDChanging(value As String)
    End Sub
    Partial Private Sub OnHeaderIDChanged()
    End Sub
    Partial Private Sub OnAccntChanging(value As String)
    End Sub
    Partial Private Sub OnAccntChanged()
    End Sub
    Partial Private Sub OntaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntaxChanged()
    End Sub
    Partial Private Sub Onformula1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onformula1Changed()
    End Sub
    Partial Private Sub Onformula2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onformula2Changed()
    End Sub
    Partial Private Sub Onformula3Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onformula3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(200)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ref", DbType:="VarChar(200)")>  _
	Public Property Ref() As String
		Get
			Return Me._Ref
		End Get
		Set
			If (String.Equals(Me._Ref, value) = false) Then
				Me.OnRefChanging(value)
				Me.SendPropertyChanging
				Me._Ref = value
				Me.SendPropertyChanged("Ref")
				Me.OnRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentRelatedto", DbType:="VarChar(200)")>  _
	Public Property PaymentRelatedto() As String
		Get
			Return Me._PaymentRelatedto
		End Get
		Set
			If (String.Equals(Me._PaymentRelatedto, value) = false) Then
				Me.OnPaymentRelatedtoChanging(value)
				Me.SendPropertyChanging
				Me._PaymentRelatedto = value
				Me.SendPropertyChanged("PaymentRelatedto")
				Me.OnPaymentRelatedtoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeaderID", DbType:="VarChar(200)")>  _
	Public Property HeaderID() As String
		Get
			Return Me._HeaderID
		End Get
		Set
			If (String.Equals(Me._HeaderID, value) = false) Then
				Me.OnHeaderIDChanging(value)
				Me.SendPropertyChanging
				Me._HeaderID = value
				Me.SendPropertyChanged("HeaderID")
				Me.OnHeaderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accnt", DbType:="VarChar(200)")>  _
	Public Property Accnt() As String
		Get
			Return Me._Accnt
		End Get
		Set
			If (String.Equals(Me._Accnt, value) = false) Then
				Me.OnAccntChanging(value)
				Me.SendPropertyChanging
				Me._Accnt = value
				Me.SendPropertyChanged("Accnt")
				Me.OnAccntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tax", DbType:="Money")>  _
	Public Property tax() As System.Nullable(Of Decimal)
		Get
			Return Me._tax
		End Get
		Set
			If (Me._tax.Equals(value) = false) Then
				Me.OntaxChanging(value)
				Me.SendPropertyChanging
				Me._tax = value
				Me.SendPropertyChanged("tax")
				Me.OntaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formula1", DbType:="Float")>  _
	Public Property formula1() As System.Nullable(Of Double)
		Get
			Return Me._formula1
		End Get
		Set
			If (Me._formula1.Equals(value) = false) Then
				Me.Onformula1Changing(value)
				Me.SendPropertyChanging
				Me._formula1 = value
				Me.SendPropertyChanged("formula1")
				Me.Onformula1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formula2", DbType:="Float")>  _
	Public Property formula2() As System.Nullable(Of Double)
		Get
			Return Me._formula2
		End Get
		Set
			If (Me._formula2.Equals(value) = false) Then
				Me.Onformula2Changing(value)
				Me.SendPropertyChanging
				Me._formula2 = value
				Me.SendPropertyChanged("formula2")
				Me.Onformula2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_formula3", DbType:="Float")>  _
	Public Property formula3() As System.Nullable(Of Double)
		Get
			Return Me._formula3
		End Get
		Set
			If (Me._formula3.Equals(value) = false) Then
				Me.Onformula3Changing(value)
				Me.SendPropertyChanging
				Me._formula3 = value
				Me.SendPropertyChanged("formula3")
				Me.Onformula3Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblvoucherHeader")>  _
Partial Public Class tblvoucherHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Payee As String
	
	Private _Prfno As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _PVseries As String
	
	Private _CheckDate As System.Nullable(Of Date)
	
	Private _Checkno As String
	
	Private _Remarks As String
	
	Private _Status As String
	
	Private _checkby As String
	
	Private _aprrv As String
	
	Private _encoder As String
	
	Private _Stat As String
	
	Private _printed As System.Nullable(Of Integer)
	
	Private _modeofreleasing As String
	
	Private _Confirmeddate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnPayeeChanging(value As String)
    End Sub
    Partial Private Sub OnPayeeChanged()
    End Sub
    Partial Private Sub OnPrfnoChanging(value As String)
    End Sub
    Partial Private Sub OnPrfnoChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnPVseriesChanging(value As String)
    End Sub
    Partial Private Sub OnPVseriesChanged()
    End Sub
    Partial Private Sub OnCheckDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCheckDateChanged()
    End Sub
    Partial Private Sub OnChecknoChanging(value As String)
    End Sub
    Partial Private Sub OnChecknoChanged()
    End Sub
    Partial Private Sub OnRemarksChanging(value As String)
    End Sub
    Partial Private Sub OnRemarksChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OncheckbyChanging(value As String)
    End Sub
    Partial Private Sub OncheckbyChanged()
    End Sub
    Partial Private Sub OnaprrvChanging(value As String)
    End Sub
    Partial Private Sub OnaprrvChanged()
    End Sub
    Partial Private Sub OnencoderChanging(value As String)
    End Sub
    Partial Private Sub OnencoderChanged()
    End Sub
    Partial Private Sub OnStatChanging(value As String)
    End Sub
    Partial Private Sub OnStatChanged()
    End Sub
    Partial Private Sub OnprintedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnprintedChanged()
    End Sub
    Partial Private Sub OnmodeofreleasingChanging(value As String)
    End Sub
    Partial Private Sub OnmodeofreleasingChanged()
    End Sub
    Partial Private Sub OnConfirmeddateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnConfirmeddateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Payee", DbType:="VarChar(MAX)")>  _
	Public Property Payee() As String
		Get
			Return Me._Payee
		End Get
		Set
			If (String.Equals(Me._Payee, value) = false) Then
				Me.OnPayeeChanging(value)
				Me.SendPropertyChanging
				Me._Payee = value
				Me.SendPropertyChanged("Payee")
				Me.OnPayeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prfno", DbType:="VarChar(MAX)")>  _
	Public Property Prfno() As String
		Get
			Return Me._Prfno
		End Get
		Set
			If (String.Equals(Me._Prfno, value) = false) Then
				Me.OnPrfnoChanging(value)
				Me.SendPropertyChanging
				Me._Prfno = value
				Me.SendPropertyChanged("Prfno")
				Me.OnPrfnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PVseries", DbType:="VarChar(MAX)")>  _
	Public Property PVseries() As String
		Get
			Return Me._PVseries
		End Get
		Set
			If (String.Equals(Me._PVseries, value) = false) Then
				Me.OnPVseriesChanging(value)
				Me.SendPropertyChanging
				Me._PVseries = value
				Me.SendPropertyChanged("PVseries")
				Me.OnPVseriesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckDate", DbType:="Date")>  _
	Public Property CheckDate() As System.Nullable(Of Date)
		Get
			Return Me._CheckDate
		End Get
		Set
			If (Me._CheckDate.Equals(value) = false) Then
				Me.OnCheckDateChanging(value)
				Me.SendPropertyChanging
				Me._CheckDate = value
				Me.SendPropertyChanged("CheckDate")
				Me.OnCheckDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Checkno", DbType:="VarChar(MAX)")>  _
	Public Property Checkno() As String
		Get
			Return Me._Checkno
		End Get
		Set
			If (String.Equals(Me._Checkno, value) = false) Then
				Me.OnChecknoChanging(value)
				Me.SendPropertyChanging
				Me._Checkno = value
				Me.SendPropertyChanged("Checkno")
				Me.OnChecknoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remarks", DbType:="VarChar(MAX)")>  _
	Public Property Remarks() As String
		Get
			Return Me._Remarks
		End Get
		Set
			If (String.Equals(Me._Remarks, value) = false) Then
				Me.OnRemarksChanging(value)
				Me.SendPropertyChanging
				Me._Remarks = value
				Me.SendPropertyChanged("Remarks")
				Me.OnRemarksChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(MAX)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_checkby", DbType:="VarChar(MAX)")>  _
	Public Property checkby() As String
		Get
			Return Me._checkby
		End Get
		Set
			If (String.Equals(Me._checkby, value) = false) Then
				Me.OncheckbyChanging(value)
				Me.SendPropertyChanging
				Me._checkby = value
				Me.SendPropertyChanged("checkby")
				Me.OncheckbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_aprrv", DbType:="VarChar(MAX)")>  _
	Public Property aprrv() As String
		Get
			Return Me._aprrv
		End Get
		Set
			If (String.Equals(Me._aprrv, value) = false) Then
				Me.OnaprrvChanging(value)
				Me.SendPropertyChanging
				Me._aprrv = value
				Me.SendPropertyChanged("aprrv")
				Me.OnaprrvChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_encoder", DbType:="VarChar(MAX)")>  _
	Public Property encoder() As String
		Get
			Return Me._encoder
		End Get
		Set
			If (String.Equals(Me._encoder, value) = false) Then
				Me.OnencoderChanging(value)
				Me.SendPropertyChanging
				Me._encoder = value
				Me.SendPropertyChanged("encoder")
				Me.OnencoderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stat", DbType:="VarChar(MAX)")>  _
	Public Property Stat() As String
		Get
			Return Me._Stat
		End Get
		Set
			If (String.Equals(Me._Stat, value) = false) Then
				Me.OnStatChanging(value)
				Me.SendPropertyChanging
				Me._Stat = value
				Me.SendPropertyChanged("Stat")
				Me.OnStatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_printed", DbType:="Int")>  _
	Public Property printed() As System.Nullable(Of Integer)
		Get
			Return Me._printed
		End Get
		Set
			If (Me._printed.Equals(value) = false) Then
				Me.OnprintedChanging(value)
				Me.SendPropertyChanging
				Me._printed = value
				Me.SendPropertyChanged("printed")
				Me.OnprintedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modeofreleasing", DbType:="VarChar(MAX)")>  _
	Public Property modeofreleasing() As String
		Get
			Return Me._modeofreleasing
		End Get
		Set
			If (String.Equals(Me._modeofreleasing, value) = false) Then
				Me.OnmodeofreleasingChanging(value)
				Me.SendPropertyChanging
				Me._modeofreleasing = value
				Me.SendPropertyChanged("modeofreleasing")
				Me.OnmodeofreleasingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Confirmeddate", DbType:="DateTime")>  _
	Public Property Confirmeddate() As System.Nullable(Of Date)
		Get
			Return Me._Confirmeddate
		End Get
		Set
			If (Me._Confirmeddate.Equals(value) = false) Then
				Me.OnConfirmeddateChanging(value)
				Me.SendPropertyChanging
				Me._Confirmeddate = value
				Me.SendPropertyChanged("Confirmeddate")
				Me.OnConfirmeddateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblsupplier")>  _
Partial Public Class tblsupplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Supplier As String
	
	Private _wtax As System.Nullable(Of Double)
	
	Private _terms As String
	
	Private _tin1 As String
	
	Private _tin2 As String
	
	Private _tin3 As String
	
	Private _tin4 As String
	
	Private _address As String
	
	Private _ATC As String
	
	Private _ATCdes As String
	
	Private _zipcode As String
	
	Private _Vat As String
	
	Private _Category As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnSupplierChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierChanged()
    End Sub
    Partial Private Sub OnwtaxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnwtaxChanged()
    End Sub
    Partial Private Sub OntermsChanging(value As String)
    End Sub
    Partial Private Sub OntermsChanged()
    End Sub
    Partial Private Sub Ontin1Changing(value As String)
    End Sub
    Partial Private Sub Ontin1Changed()
    End Sub
    Partial Private Sub Ontin2Changing(value As String)
    End Sub
    Partial Private Sub Ontin2Changed()
    End Sub
    Partial Private Sub Ontin3Changing(value As String)
    End Sub
    Partial Private Sub Ontin3Changed()
    End Sub
    Partial Private Sub Ontin4Changing(value As String)
    End Sub
    Partial Private Sub Ontin4Changed()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OnATCChanging(value As String)
    End Sub
    Partial Private Sub OnATCChanged()
    End Sub
    Partial Private Sub OnATCdesChanging(value As String)
    End Sub
    Partial Private Sub OnATCdesChanged()
    End Sub
    Partial Private Sub OnzipcodeChanging(value As String)
    End Sub
    Partial Private Sub OnzipcodeChanged()
    End Sub
    Partial Private Sub OnVatChanging(value As String)
    End Sub
    Partial Private Sub OnVatChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supplier", DbType:="VarChar(MAX)")>  _
	Public Property Supplier() As String
		Get
			Return Me._Supplier
		End Get
		Set
			If (String.Equals(Me._Supplier, value) = false) Then
				Me.OnSupplierChanging(value)
				Me.SendPropertyChanging
				Me._Supplier = value
				Me.SendPropertyChanged("Supplier")
				Me.OnSupplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wtax", DbType:="Float")>  _
	Public Property wtax() As System.Nullable(Of Double)
		Get
			Return Me._wtax
		End Get
		Set
			If (Me._wtax.Equals(value) = false) Then
				Me.OnwtaxChanging(value)
				Me.SendPropertyChanging
				Me._wtax = value
				Me.SendPropertyChanged("wtax")
				Me.OnwtaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_terms", DbType:="VarChar(MAX)")>  _
	Public Property terms() As String
		Get
			Return Me._terms
		End Get
		Set
			If (String.Equals(Me._terms, value) = false) Then
				Me.OntermsChanging(value)
				Me.SendPropertyChanging
				Me._terms = value
				Me.SendPropertyChanged("terms")
				Me.OntermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tin1", DbType:="VarChar(MAX)")>  _
	Public Property tin1() As String
		Get
			Return Me._tin1
		End Get
		Set
			If (String.Equals(Me._tin1, value) = false) Then
				Me.Ontin1Changing(value)
				Me.SendPropertyChanging
				Me._tin1 = value
				Me.SendPropertyChanged("tin1")
				Me.Ontin1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tin2", DbType:="VarChar(MAX)")>  _
	Public Property tin2() As String
		Get
			Return Me._tin2
		End Get
		Set
			If (String.Equals(Me._tin2, value) = false) Then
				Me.Ontin2Changing(value)
				Me.SendPropertyChanging
				Me._tin2 = value
				Me.SendPropertyChanged("tin2")
				Me.Ontin2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tin3", DbType:="VarChar(MAX)")>  _
	Public Property tin3() As String
		Get
			Return Me._tin3
		End Get
		Set
			If (String.Equals(Me._tin3, value) = false) Then
				Me.Ontin3Changing(value)
				Me.SendPropertyChanging
				Me._tin3 = value
				Me.SendPropertyChanged("tin3")
				Me.Ontin3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tin4", DbType:="VarChar(MAX)")>  _
	Public Property tin4() As String
		Get
			Return Me._tin4
		End Get
		Set
			If (String.Equals(Me._tin4, value) = false) Then
				Me.Ontin4Changing(value)
				Me.SendPropertyChanging
				Me._tin4 = value
				Me.SendPropertyChanged("tin4")
				Me.Ontin4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(MAX)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATC", DbType:="VarChar(MAX)")>  _
	Public Property ATC() As String
		Get
			Return Me._ATC
		End Get
		Set
			If (String.Equals(Me._ATC, value) = false) Then
				Me.OnATCChanging(value)
				Me.SendPropertyChanging
				Me._ATC = value
				Me.SendPropertyChanged("ATC")
				Me.OnATCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATCdes", DbType:="VarChar(MAX)")>  _
	Public Property ATCdes() As String
		Get
			Return Me._ATCdes
		End Get
		Set
			If (String.Equals(Me._ATCdes, value) = false) Then
				Me.OnATCdesChanging(value)
				Me.SendPropertyChanging
				Me._ATCdes = value
				Me.SendPropertyChanged("ATCdes")
				Me.OnATCdesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zipcode", DbType:="VarChar(MAX)")>  _
	Public Property zipcode() As String
		Get
			Return Me._zipcode
		End Get
		Set
			If (String.Equals(Me._zipcode, value) = false) Then
				Me.OnzipcodeChanging(value)
				Me.SendPropertyChanging
				Me._zipcode = value
				Me.SendPropertyChanged("zipcode")
				Me.OnzipcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vat", DbType:="VarChar(MAX)")>  _
	Public Property Vat() As String
		Get
			Return Me._Vat
		End Get
		Set
			If (String.Equals(Me._Vat, value) = false) Then
				Me.OnVatChanging(value)
				Me.SendPropertyChanging
				Me._Vat = value
				Me.SendPropertyChanged("Vat")
				Me.OnVatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="VarChar(MAX)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me.OnCategoryChanging(value)
				Me.SendPropertyChanging
				Me._Category = value
				Me.SendPropertyChanged("Category")
				Me.OnCategoryChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
